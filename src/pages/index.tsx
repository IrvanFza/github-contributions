import NumberField from '@/components/forms/NumberField';
import PillButton from '@/components/forms/PillButton';
import Row from '@/components/forms/Row';
import { Options } from '@/models/Options';
import { OptionsService } from '@/services/OptionsService';
import { fromEntries, toEntries } from '@/utilities';
import { ArrowForward } from '@mui/icons-material';
import { Button, Container, Paper, Stack, TextField, TextFieldProps, styled } from '@mui/material';
import Head from 'next/head';
import { useState } from 'react';

const ContentPaper = styled(Paper)(({ theme }) => ({
    padding: theme.spacing(5, 12),
}));

type OptionErrors = Partial<Record<keyof Options, string>>;

export default function Home() {
    const [username, setUsername] = useState('');
    const [options, setOptions] = useState(OptionsService.DefaultOptions);
    const [errors, setErrors] = useState<OptionErrors>({});

    const generateButtonIsDisabled = username.length == 0;
    const resetButtonIsVisible = Object.keys(getOptionsWithoutDefaults(options)).length != 0;

    function handleUsernameChange(e: React.ChangeEvent<HTMLInputElement>): void {
        setUsername(e.target.value);
    }

    function handleOptionChange(
        key: keyof OptionsService.ContributionOptions,
    ): (e: React.ChangeEvent<HTMLInputElement>) => void {
        return (e) => {
            setErrors((errors) => ({ ...errors, [key]: undefined }));
            setOptions((prev) => ({ ...prev, [key]: e.target.value }));
        };
    }

    function getInputProps(key: keyof OptionsService.ContributionOptions): TextFieldProps {
        return {
            fullWidth: true,
            error: !!errors[key],
            helperText: errors[key],
            value: options[key] ?? OptionsService.DefaultOptions[key],
            onChange: handleOptionChange(key),
        };
    }

    function getOptionsWithoutDefaults(options: OptionsService.ContributionOptions): Partial<Options> {
        return fromEntries<Partial<Options>>(
            toEntries(options).filter(([key, value]) => value !== OptionsService.DefaultOptions[key]),
        );
    }

    function optionsAreValid(optionsWithoutDefaults: Partial<Options>): boolean {
        const errors: OptionErrors = {};
        if (optionsWithoutDefaults.width && optionsWithoutDefaults.width <= 0) {
            errors.width = 'Width must be greater than 0';
        }
        if (optionsWithoutDefaults.height && optionsWithoutDefaults.height <= 0) {
            errors.height = 'Height must be greater than 0';
        }

        const hasErrors = Object.keys(errors).length != 0;

        setErrors(errors);
        return !hasErrors;
    }

    function generateApiUrl(username: string, options: Partial<Options>): string {
        // Remove the hash from the colours
        if (options.bg) options.bg = options.bg.replace('#', '');
        if (options.color) options.color = options.color.replace('#', '');

        const baseUrl = `/api/contributions/${username}`;
        const url = new URL(baseUrl, window.location.origin);

        for (const [key, value] of Object.entries(options)) {
            url.searchParams.append(key, value.toString());
        }

        return url.toString();
    }

    function handleGenerate(): void {
        const optionsWithoutDefaults = getOptionsWithoutDefaults(options);

        if (optionsAreValid(optionsWithoutDefaults)) {
            console.log(generateApiUrl(username, optionsWithoutDefaults));
        }
    }

    function handleResetToDefaults(): void {
        setErrors({});
        setOptions(OptionsService.DefaultOptions);
    }

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <Container maxWidth="md" sx={{ marginTop: 5 }}>
                    <ContentPaper elevation={1}>
                        <Stack gap={3}>
                            <TextField
                                required
                                fullWidth
                                label="GitHub Username"
                                placeholder="E.g. pumbas600"
                                value={username}
                                onChange={handleUsernameChange}
                            />
                            <Row>
                                <TextField type="color" label="Primary Colour" {...getInputProps('color')} />
                                <TextField type="color" label="Background Colour" {...getInputProps('bg')} />
                            </Row>
                            <Row>
                                <NumberField label="Width (px)" {...getInputProps('width')} />
                                <NumberField label="Height (px)" {...getInputProps('height')} />
                            </Row>
                            <Stack gap={2} direction="row-reverse">
                                <PillButton
                                    endIcon={<ArrowForward />}
                                    onClick={handleGenerate}
                                    disabled={generateButtonIsDisabled}
                                >
                                    Generate
                                </PillButton>
                                {resetButtonIsVisible && (
                                    <Button variant="text" onClick={handleResetToDefaults}>
                                        Reset to defaults
                                    </Button>
                                )}
                            </Stack>
                        </Stack>
                    </ContentPaper>
                </Container>
            </main>
        </>
    );
}
