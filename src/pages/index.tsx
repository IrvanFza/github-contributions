import CodeBlock from '@/components/cards/CodeBlock';
import PlaygroundCard from '@/components/cards/PlaygroundCard';
import ChartImg from '@/components/forms/ChartImage';
import PlaygroundOptions, {
    DefaultOptions,
    StringifiedOptions,
    getOptionsWithoutDefaults,
} from '@/components/forms/playground/PlaygroundOptions';
import Header from '@/components/header';
import StyledLink from '@/components/typography/StyledLink';
import Subtitle from '@/components/typography/Subtitle';
import { GitHubRepoUrl } from '@/data/Links';
import useDebounce from '@/hooks/useDebounce';
import { OptionsService } from '@/services/OptionsService';
import { Alert, Box, Container, Stack, TextField, Typography, styled } from '@mui/material';
import Head from 'next/head';
import React, { ChangeEvent, useState } from 'react';

const ResponsiveContainer = styled(Container)(({ theme }) => ({
    marginTop: theme.spacing(5),
    marginBottom: theme.spacing(5),

    [theme.breakpoints.down('md')]: {
        marginTop: theme.spacing(3),
        marginBottom: theme.spacing(3),
    },
}));

type OptionErrors = Partial<Record<keyof OptionsService.ContributionOptions, string>>;

export default function Home() {
    const [username, setUsername] = useState<string>('');
    const [options, setOptions] = useState(DefaultOptions);
    const [errors, setErrors] = useState<OptionErrors>({});
    const [generatedUrl, setGeneratedUrl] = useState<string | null>(null);

    const debouncedGeneratedUrl = useDebounce(generatedUrl);

    const showRenderedChart =
        debouncedGeneratedUrl !== null && username.length !== 0 && Object.keys(errors).length === 0;
    const contributionImageAltText = `${username}â€™s GitHub Contributions`;

    function handleUsernameChange(e: ChangeEvent<HTMLInputElement>): void {
        const username = e.target.value;
        setUsername(username);

        if (username.length == 0) {
            setGeneratedUrl(null);
        } else {
            handleGenerate(options, username);
        }
    }

    function generateApiUrl(username: string, options: Partial<StringifiedOptions>): string {
        const baseUrl = `/api/contributions/${username}`;
        const url = new URL(baseUrl, window.location.origin);

        for (const [key, value] of Object.entries(options)) {
            if (value === undefined) continue;

            let stringValue = value.toString();
            if (stringValue.startsWith('#')) {
                // Remove the hash from the colours
                stringValue = stringValue.replace('#', '').toUpperCase();
            }
            url.searchParams.set(key, stringValue);
        }

        return url.toString();
    }

    const validateOptions = (optionsWithoutDefaults: Partial<StringifiedOptions>): boolean => {
        const errors: OptionErrors = {};

        const width = Number(optionsWithoutDefaults.width);
        const height = Number(optionsWithoutDefaults.height);
        const days = Number(optionsWithoutDefaults.days);

        if (optionsWithoutDefaults.width !== undefined && (isNaN(width) || width <= 0)) {
            errors.width = 'Width must be greater than 0';
        }
        if ((optionsWithoutDefaults.height !== undefined && isNaN(height)) || height <= 0) {
            errors.height = 'Height must be greater than 0';
        }
        if (optionsWithoutDefaults.days !== undefined && (isNaN(days) || days <= 0)) {
            errors.days = 'Days must be greater than 0';
        }

        const hasErrors = Object.keys(errors).length != 0;

        setErrors(errors);
        return !hasErrors;
    };

    function handleGenerate(options: StringifiedOptions, username: string): void {
        if (username.length === 0) return;
        const optionsWithoutDefaults = getOptionsWithoutDefaults(options);

        if (validateOptions(optionsWithoutDefaults)) {
            const generatedUrl = generateApiUrl(username, optionsWithoutDefaults);
            setGeneratedUrl(generatedUrl);
        }
    }

    const handleOptionsChange = (options: StringifiedOptions): void => {
        setOptions(options);
        handleGenerate(options, username);
    };

    return (
        <>
            <Head>
                <title>GitHub Contributions Playground</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <ResponsiveContainer maxWidth="md">
                    <Header />
                    <PlaygroundCard>
                        <Stack gap={3}>
                            <Box>
                                <Subtitle>Enter your username to get started</Subtitle>
                                <Typography variant="body2">
                                    This playground is styled after the GitHub default light and dark themes in order to
                                    accurately recreate how the charts will look in GitHub READMEs.
                                </Typography>
                            </Box>
                            <TextField
                                spellCheck={false}
                                required
                                fullWidth
                                label="GitHub username"
                                placeholder="E.g. pumbas600"
                                value={username}
                                onChange={handleUsernameChange}
                            />
                            {showRenderedChart && (
                                <ChartImg src={debouncedGeneratedUrl} alt={contributionImageAltText} />
                            )}
                            {generatedUrl && <CodeBlock code={`![${contributionImageAltText}](${generatedUrl})`} />}
                            <PlaygroundOptions errors={errors} options={options} onChange={handleOptionsChange} />
                        </Stack>
                        <Alert severity="info">
                            For more information, refer to{' '}
                            <StyledLink href={GitHubRepoUrl}>the documentation</StyledLink> on GitHub.
                        </Alert>
                    </PlaygroundCard>
                </ResponsiveContainer>
            </main>
        </>
    );
}
